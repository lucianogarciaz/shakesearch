// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package server_test

import (
	"context"
	"pulley.com/shakesearch/pkg/ask"
	"sync"
)

// Ensure, that AskMock does implement ask.Ask.
// If this is not the case, regenerate this file with moq.
var _ ask.Ask = &AskMock{}

// AskMock is a mock implementation of ask.Ask.
//
//	func TestSomethingThatUsesAsk(t *testing.T) {
//
//		// make and configure a mocked ask.Ask
//		mockedAsk := &AskMock{
//			AskFunc: func(ctx context.Context, query string) (string, error) {
//				panic("mock out the Ask method")
//			},
//		}
//
//		// use mockedAsk in code that requires ask.Ask
//		// and then make assertions.
//
//	}
type AskMock struct {
	// AskFunc mocks the Ask method.
	AskFunc func(ctx context.Context, query string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Ask holds details about calls to the Ask method.
		Ask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query string
		}
	}
	lockAsk sync.RWMutex
}

// Ask calls AskFunc.
func (mock *AskMock) Ask(ctx context.Context, query string) (string, error) {
	if mock.AskFunc == nil {
		panic("AskMock.AskFunc: method is nil but Ask.Ask was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query string
	}{
		Ctx:   ctx,
		Query: query,
	}
	mock.lockAsk.Lock()
	mock.calls.Ask = append(mock.calls.Ask, callInfo)
	mock.lockAsk.Unlock()
	return mock.AskFunc(ctx, query)
}

// AskCalls gets all the calls that were made to Ask.
// Check the length with:
//
//	len(mockedAsk.AskCalls())
func (mock *AskMock) AskCalls() []struct {
	Ctx   context.Context
	Query string
} {
	var calls []struct {
		Ctx   context.Context
		Query string
	}
	mock.lockAsk.RLock()
	calls = mock.calls.Ask
	mock.lockAsk.RUnlock()
	return calls
}
